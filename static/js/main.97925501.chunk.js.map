{"version":3,"sources":["Components/TodoItem.js","Components/Todos.js","App.js","serviceWorker.js","index.js"],"names":["TodoItem","props","type","checked","item","completed","onChange","handleChange","id","style","color","textDecoration","text","Todos","state","todos","bind","divStyle","margin","display","flexDirection","minWidth","maxWidth","textAlign","background","h1Style","backgroundColor","padding","textTransform","fontSize","fontWeight","this","setState","prevState","map","todo","todoItems","key","React","Component","App","height","width","justifyContent","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"ySAoBeA,MAlBf,SAAkBC,GAMd,OACI,6BACI,2BACIC,KAAK,WACLC,QAASF,EAAMG,KAAKC,UACpBC,SAAU,kBAAML,EAAMM,aAAaN,EAAMG,KAAKI,OAElD,uBAAGC,MAAOR,EAAMG,KAAKC,UAZN,CACnBK,MAAO,OACPC,eAAgB,gBAUqC,MAAOV,EAAMG,KAAKQ,QCqEhEC,E,kDA/EX,aAAe,IAAD,8BACV,gBACKC,MAAQ,CACTC,MAAO,CACH,CACIP,GAAI,EACJI,KAAM,SACNP,WAAW,GAEf,CACIG,GAAI,EACJI,KAAM,SACNP,WAAW,GAEf,CACIG,GAAI,EACJI,KAAM,SACNP,WAAW,KAKvB,EAAKE,aAAe,EAAKA,aAAaS,KAAlB,gBAEpB,EAAKC,SAAW,CACZC,OAAQ,SACRC,QAAS,OACTC,cAAe,SACfC,SAAU,QACVC,SAAU,QACVC,UAAW,SACXC,WAAY,WAGhB,EAAKC,QAAU,CACXC,gBAAiB,UACpBhB,MAAO,QACPQ,OAAQ,IACRS,QAAS,YACTC,cAAe,YACfC,SAAU,OACVC,WAAY,UAzCH,E,yDA6CDtB,GACTuB,KAAKC,UAAS,SAAAC,GAUV,MAAO,CACHlB,MAViBkB,EAAUlB,MAAMmB,KAAI,SAAAC,GACrC,OAAIA,EAAK3B,KAAOA,EACL,2BACA2B,GADP,IAEI9B,WAAY8B,EAAK9B,YAGlB8B,W,+BAQT,IAAD,OACCC,EAAYL,KAAKjB,MAAMC,MAAMmB,KAAI,SAAA9B,GAAI,OACvC,kBAAC,EAAD,CACIiC,IAAKjC,EAAKI,GACVJ,KAAMA,EACNG,aAAc,EAAKA,kBAG3B,OACI,yBAAKE,MAAOsB,KAAKd,UACb,wBAAIR,MAAOsB,KAAKN,SAAhB,SACCW,O,GA1EGE,IAAMC,WCqBXC,MApBf,WAAgB,IAAD,EACT/B,GAAK,GACPgC,OAAQ,QACRC,MAAO,OACPvB,QAAS,OACTC,cAAe,SACfuB,eAAgB,SAChBnB,WAAY,WANL,2BAOK,gEAPL,2BAQK,wDARL,GAYT,OACE,yBAAKf,MAAOA,GACV,kBAAC,EAAD,QCRcmC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.97925501.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nfunction TodoItem(props) {\r\n    const completedStyle = {\r\n        color: 'grey',\r\n        textDecoration: 'line-through'\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <input \r\n                type=\"checkbox\"\r\n                checked={props.item.completed}\r\n                onChange={() => props.handleChange(props.item.id)}\r\n            />\r\n            <p style={props.item.completed ? completedStyle: null}>{props.item.text}</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TodoItem","import React from 'react'\r\n\r\nimport TodoItem from './TodoItem'\r\n\r\nclass Todos extends React.Component {\r\n    constructor() {\r\n        super()\r\n        this.state = {\r\n            todos: [\r\n                {\r\n                    id: 1,\r\n                    text: 'Todo 1',\r\n                    completed: true\r\n                },\r\n                {\r\n                    id: 2,\r\n                    text: 'Todo 2',\r\n                    completed: false\r\n                },\r\n                {\r\n                    id: 3,\r\n                    text: 'Todo 3',\r\n                    completed: false\r\n                }\r\n            ]\r\n        }\r\n\r\n        this.handleChange = this.handleChange.bind(this)\r\n\r\n        this.divStyle = {\r\n            margin: '0 auto',\r\n            display: 'flex',\r\n            flexDirection: 'column',\r\n            minWidth: '500px',\r\n            maxWidth: '750px',\r\n            textAlign: 'center',\r\n            background: '#f7f7f7'\r\n        }\r\n\r\n        this.h1Style = {\r\n            backgroundColor: '#2980b9',\r\n\t        color: 'white',\r\n\t        margin: '0',\r\n\t        padding: '10px 20px',\r\n\t        textTransform: 'uppercase',\r\n\t        fontSize: '24px',\r\n\t        fontWeight: 'normal',\r\n        }\r\n    }\r\n\r\n    handleChange(id) {\r\n        this.setState(prevState => {\r\n            const updatedTodos = prevState.todos.map(todo => {\r\n                if (todo.id === id) {\r\n                    return {\r\n                        ...todo,\r\n                        completed: !todo.completed\r\n                    }\r\n                }\r\n                return todo\r\n            })\r\n            return {\r\n                todos: updatedTodos\r\n            }\r\n        })\r\n    }\r\n\r\n    render() {\r\n        const todoItems = this.state.todos.map(item => \r\n            <TodoItem \r\n                key={item.id} \r\n                item={item}\r\n                handleChange={this.handleChange}\r\n            />)\r\n\r\n        return (\r\n            <div style={this.divStyle}>\r\n                <h1 style={this.h1Style}>Todos</h1>\r\n                {todoItems}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Todos","import React from 'react';\r\nimport './App.css';\r\n\r\nimport Todos from './Components/Todos'\r\n\r\nfunction App() {\r\n  let style = {\r\n    height: '100vh',\r\n    width: '100%',\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    justifyContent: 'center',\r\n    background: '#0f0c29',\r\n    background: '-webkit-linear-gradient(to right, #24243e, #302b63, #0f0c29)',\r\n    background: 'linear-gradient(to right, #24243e, #302b63, #0f0c29)'\r\n  \r\n  }\r\n\r\n  return (\r\n    <div style={style}>\r\n      <Todos />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}